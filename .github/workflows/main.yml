# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Name of the current branch
        run: |
          echo "Current branch is ${GITHUB_REF#refs/heads/}"

  Build_Windows:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Name of the current branch
        run: |
          $BRANCH_FULL = ${env:GITHUB_REF}
          $BRANCH_LIST = $BRANCH_FULL.split("/")
          $BRANCH_LIST = $BRANCH_LIST[2..$BRANCH_LIST.length]
          $ofs = "/"
          $BRANCH = [STRING]$BRANCH_LIST
          echo "Current branch is $BRANCH"
      - name: Check whether the branch starts with release or not
        run: |
          $BRANCH = ${env:GITHUB_REF}
          echo "Current branch is $BRANCH"
          if($BRANCH -like "refs/heads/release*")
          {
            echo "Starts with release"
          }
          else
          {
            echo "Do not starts with release"
          }
          
      - name: Setting the commit output
        shell: cmd
        id: commit-message-generator
        run: |
          python test.py > temp.txt
          set /p OUTPUT=<temp.txt
          del temp.txt
          echo ::set-output name=COMMIT_MESSAGE::%OUTPUT%
          
      - name: Getting the commit message
        shell: cmd
        run: |
          echo The Commit message is ${{ steps.commit-message-generator.outputs.COMMIT_MESSAGE }}
          
          
          
